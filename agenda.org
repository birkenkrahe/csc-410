#+title: Agenda Notebook
#+author: Marcus Birkenkrahe
#+subtitle: CSC 410 - Data Communications and Networking - Spring 2025
#+SEQ_TODO: TODO NEXT IN_PROGRESS PRACTICE WAITING | DONE CANCELLED
#+startup: overview hideblocks indent
:PROPERTIES:
:header-args:C:      :main yes :includes <stdio.h> :results output :exports both
:header-args:python: :session *Python* :python python3 :results output :exports both
:header-args:R:      :session *R* :results graphics output file :exports both
:header-args:C++:    :main yes :includes <iostream> :results output :exports both
:END:
* DONE Week 1: Course overview
#+attr_html: :width 400px
[[../img/cover.jpg]]

- [X] Course overview
- [X] Installing Cisco Packet Tracer
- [X] Introducing Networks and Protocols
- [ ] Getting started with Cisco Packet Tracer
- [ ] C Programming Basics Review: "FizzBuzz"

** DONE [[file:1_overview.org][Course overview]]: Content, Grading, Projects, Platforms

** DONE Review (Overview)

1. Remember at least 2 topics that will be addressed in this class.
   #+begin_quote
   1. Cloud computing
   2. Microservice technologies
   3. Networking and Internet protocols
   4. Cisco Packet Tracer simulation
   5. Socket programming with C
   #+end_quote

2. What is "Termux"?
   #+begin_quote
   A Linux emulator for Android phones.
   #+end_quote

3. Why is Linux relevant for computer networks?
   #+begin_quote
   1. Dominant operating system for servers (97% of web servers, 90%
      of cloud computing servers, > 70% of global market overall).
   2. Free and open source.
   3. Core platform for microservices like Docker and Kubernetes.
   4. Powerful command-line networking tools for configuration,
      firewalling, monitoring, analysis.
   #+end_quote

4. What is an Internet "packet"?
   #+begin_quote
   An Internet packet (= header + payload) is a small unit of data
   transmitted over a network as part of a message. Packets are
   independently routed through the network and then reassembled at
   their destination to recreate the original message.
   #+end_quote

5. What is Cisco Packet Tracer?
   #+begin_quote
   Cisco packet tracer is a cross-platform network simulation tool
   developed by Cisco Systems, the dominant firm in networking.
   #+end_quote

** IN_PROGRESS Introducing Networks and Protocols

- [X] Network programming and C
- [ ] OSI layer model
- [ ] TCP/IP reference model
- [ ] The Internet Protocol (IP)
- [ ] IPv4 and IPv6 addresses
- [ ] Domain names
- [ ] Internet protocol routing
- [ ] Network address translation
- [ ] Client-Server paradigm
- [ ] Listing your IP addresses using C

* DONE Week 2: Introduction to networking
#+attr_html: :width 600px:
#+caption: Building (Retro)
[[../img/builder.jpg]]

- [X] The Internet is C
- [X] Layering principle
- [X] OSI model
- [ ] Cisco Packet Tracer
- [ ] Test 1 (Deadline Friday, 31 January)

** Review / Preview (next test sometime this week)

1. What is a network?
   #+begin_quote
   A collection of interconnected nodes or devices that exchange data.
   #+end_quote

2. Which areas of mathematics are most relevant for networks?
   #+begin_quote
   - *Graph theory* (theory of nodes connected by weighted edges) for
     network optimization and routing algorithms.
   - *Probability and statistics* for traffic modeling and performance
     analysis.
   - *Fourier analysis* (approximations of general functions by sums of
     simpler trigonometric functions) for signal processing.
   #+end_quote

3. In which sense it "The Internet is C" true?
   #+begin_quote
   - Network stacks (layered software supporting the network) is
     programmed in C.
   - All network-relevant (processes, files, sockets) kernel code is
     programmed in C.
   #+end_quote

4. Name at least two benefits of a "layering" approach to building:
   #+begin_quote
   - *Modularity* = independent design, development, maintenance
   - *Abstraction* = layer details hidden from other layers
   - *Interchangeability* = component replacement by layer
   - *Interoperability* = different systems working together
   #+end_quote

5. Name at least two of the layers of the OSI model.
   #+begin_quote
   1) Application
   2) Presentation
   3) Session
   4) Transport
   5) Network
   6) Data Link
   7) Physical
   #+end_quote

6. What does "on-premise" computing mean and what else is there?
   #+caption: Cloud service models - car analogy (DataCamp, 2020)
   #+attr_html: :width 600px
   [[../img/services.png]]

   #+begin_comment
   - On-premise: Run infrastructrure (servers), platform (apps),
   and (end-customer) software.

   - Cloud: Outsource infrastructure, platform(s), and software.
   #+end_comment

7. What do different cloud services (business models) deliver?
   #+caption: IaaS vs. PaaS vs. SaaS (DataCamp, 2020)
   #+attr_html: :width 600px
   [[../img/services1.png]]

8. What is the relationship between "control" and "abstraction" in
   cloud computing?
   #+caption: Control vs. Abstraction (DataCamp, 2020)
   #+attr_html: :width 500px
   [[../img/pyramid.png]]

9. Who dominates the cloud market?
   #+attr_html: :width 600px:
   #+caption: Source: Synergy Research Group (not checked)
   [[../img/cloud_market.png]]

10. What is the size of the global IT services market?
    #+attr_html: :width 600px:
    #+caption: Source: Precedence Research (not checked)
    [[../img/it_market.png]]

    #+begin_quote
    The size of the market for cloud computing is 5.6% of the market
    for global IT services.

    The rest (estimated via ChatGPT - not checked):

    | Segment                            | Bn USD |
    |------------------------------------+--------|
    | IT Infrastructure Management       |    300 |
    | Managed IT Services                |    200 |
    | Enterprise Software & Apps         |    250 |
    | Consulting Services                |    150 |
    | Cybersecurity                      |    120 |
    | IT Support & Maintenance           |    100 |
    | System Integration                 |     90 |
    | Telecommunications & Connectivity  |     80 |
    | Business Process Outsourcing (BPO) |     80 |
    | Emerging Technologies              |     50 |
    | Training & Professional Services   |     30 |
    |------------------------------------+--------|
    | *Total*                              |  *1,250* |

    #+end_quote


** IN_PROGRESS [[./2_packettracer.org][Cisco Packet Tracer]]: Intro & Installation & Getting started

* DONE Week 3: TCP/IP & Cisco networks
#+attr_html: :width 600px:
#+caption: The Nerd And The Network
[[../img/nerd.jpg]]

- [X] Cisco Packet Tracer Review
- [X] TCP/IP model
- [ ] IP addresses and domains
- [ ] What is a Cisco network?
- [X] Test 1 (Deadline Friday, 31 January)

** Cisco Packet Tracer review

1. Which physical equipment do you need to use Cisco Packet
   Tracer?
   #+begin_quote
   Laptop or desktop computer with Windows, Linux or MacOS.
   #+end_quote

2. What are things you can do with Cisco Packet Tracer?
   #+begin_quote
   1. Simulate physical equipment like a server rack.
   2. Design, plan and test IP networks.
   3. Configure wireless devices and wireless security.
   4. Configure and program IoT devices such as sensors.
   5. Build and configure smart home components.
   6. Watch data flow across the network and watch packets.
   7. Build a network topology from scratch.
   8. Complete assessments towards a Cisco certificate.
   #+end_quote

3. Which connection is automatically picked for the network?
   #+begin_quote
   The Ethernet connection.
   #+end_quote
4. What's the difference between the PC and the server devices?
   #+begin_quote
   The server has =services=.
   #+end_quote
5. Can you change the MAC address of a device?
   #+begin_quote
   In the simulation tool yes, in reality no - the MAC address is
   composed of two permanent parts: For the producer and the product.
   #+end_quote

6. Sketch the steps of our last lab exercise!
   #+begin_quote
   1) Open Cisco Packet Tracer app on the PC
   2) Login with Cisco net academy using your Google account
   3) Create a simple 2-host network (PC and server)
   4) Set the MAC & IP address for PC (10.1.1.1), server (10.1.1.2)
   5) Ping each device from the other
   6) Open a web page on the PC using HTTP and HTTPS services
   7) Switch off the HTTP service and try to connect again
   #+end_quote

7. Revisit your actions:
   - Open the .pkt file in your app: tinyurl.com/demo-pkt
   - =ping= the server from the PC
   - =ping= the PC from the server
   - Open a web page on the PC using the server
   - Open a web page on the server using the PC


** Projects - sprint review coming soon
#+attr_html: :width 600px:
[[../img/projects.png]]


** Test 1

- Tests are not time limited per attempt
- Only the first attempt is graded
- Subsequent attempts are for drilling (final exam)
- Tests are open book: use all resources that you can find
- Tests were created with the help of ChatGPT
- All course materials used up to now were used
- Test 1 deadline is Friday 31 Jan (max 100%)
- Test 1 is available only until Friday 7 Feb (max 50%)


** DataCamp review: Cloud Computing - Deployment

1. Why is "cloud deployment" an issue and what is it?
   #+begin_quote
   The cloud computing environment can be hacked into.

   Deployment means choosing between a private, a public or a hybrid
   cloud.
   #+end_quote

2. How is Lyon's cloud computing environment deployed?
   #+begin_quote
   The infrastructure is hybrid:
   - Sensitive data (students, grades, personnel) are private
   - Some services are open to the public (Remote Desktop Service)
   #+end_quote

3. What's "cloud bursting"?
   #+begin_quote
   The private cloud is over capacity and resources are temporarily
   moved to the public cloud.
   #+end_quote

4. What's the GDPR? What does it say?
   #+begin_quote
   General Data Protection Regulation in countries of the European
   Union. A major pain in the butt for corporations. Very expensive.

   - Users must give explicit consent to data collection
   - Users must be notified of data breaches
   - Personal information must be anonymized and encrypted
   - Personal data cannot leave EU borders unless protected
   - Violations incur fine of up to 4% of worldwide annual revenue

   In the case of Amazon, that's $22 bn of $574 bn total, or $3 bn of
   the revenue of AWS ($90 bn).
   #+end_quote

5. What are considered "personal data"? Why are they protected?
   #+begin_quote
   - Home address
   - First and last name
   - Email address
   - Location data
   - IP address
   - Racial or ethnic origin
   - Political opinions
   - Sexual orientation
   - Health-related data

   Personal data can identify a person leading to potential identity
   theft with regard to any or all of the categories above.
   #+end_quote

** Review: TCP/IP model

1. Why do we need another model besides the OSI model at all?
   #+begin_quote
   - OSI was theoretical while TCP/IP was developed on real world
     networking needs.
   - OSI only supports wired communication, TCP/IP adds wireless
     communication.
   - TCP/IP was developed and adopted alongside the internet while the
     OSI model remains a conceptual reference.
   #+end_quote

2. What are the four layers of TCP/IP?
   #+begin_quote
   1. *Application*: HTTP, SMTP, FTP protocols and applications.
   2. *Host-to-Host*: TCP and UDP protocols for data management.
   3. *Internet:* Packet addressing and routing (IP address)
   4. *Network access:* Physical connection/data framing (MAC address).
   #+end_quote

3. Remember one Linux command at each level of the TCP/IP model?
   #+begin_src bash :results output :exports both
     arp -n # network: mapping IP to MAC addresses
     hostname -I # internet: IP address of your PC
     netstat -tul | head -n 10 # host-to-host: TCP and UDP connections
     wget -O ../src/init.el tinyurl.com/lyon-emacs
     file ../src/init.el
   #+end_src

   #+RESULTS:
   #+begin_example
   Address                  HWtype  HWaddress           Flags Mask            Iface
   192.168.160.107                  (incomplete)                              wlp0s20f3
   192.168.168.10           ether   00:1a:1e:04:05:f0   C                     wlp0s20f3
   192.168.160.1            ether   70:6b:b9:9a:45:fe   C                     wlp0s20f3
   192.168.168.25
   Active Internet connections (only servers)
   Proto Recv-Q Send-Q Local Address           Foreign Address         State
   tcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN
   tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN
   tcp6       0      0 [::]:1716               [::]:*                  LISTEN
   tcp6       0      0 ip6-localhost:ipp       [::]:*                  LISTEN
   udp        0      0 localhost:domain        0.0.0.0:*
   udp        0      0 0.0.0.0:mdns            0.0.0.0:*
   udp        0      0 0.0.0.0:56340           0.0.0.0:*
   udp6       0      0 [::]:1716               [::]:*
   ../src/init.el: Lisp/Scheme program, ASCII text, with CRLF line terminators
   #+end_example

   On my computer at home:
   #+begin_example
   Address                  HWtype  HWaddress           Flags Mask            Iface
   192.168.1.254            ether   6c:4b:b4:6d:65:21   C                     enp4s0
   192.168.68.52            ether   ae:4b:fd:96:36:90   C                     wlo1
   192.168.68.1             ether   60:83:e7:71:cb:50   C                     wlo1
   192.168.68.53                    (incomplete)                              wlo1
   192.168.1.250 192.168.68.54 2600:1702:4ba0:4b0::49 2600:1702:4ba0:4b0:1028:b5ef:db96:7a53 2600:1702:4ba0:4b0:952e:b307:998b:9078
   Active Internet connections (only servers)
   Proto Recv-Q Send-Q Local Address           Foreign Address         State
   tcp        0      0 localhost:ipp           0.0.0.0:*               LISTEN
   tcp        0      0 localhost:domain        0.0.0.0:*               LISTEN
   tcp6       0      0 [::]:60000              [::]:*                  LISTEN
   tcp6       0      0 localhost:ipp           [::]:*                  LISTEN
   tcp6       0      0 [::]:1716               [::]:*                  LISTEN
   udp        0      0 mdns.mcast.net:mdns     0.0.0.0:*
   udp        0      0 mdns.mcast.net:mdns     0.0.0.0:*
   udp        0      0 mdns.mcast.net:mdns     0.0.0.0:*
   ../src/init.el: Lisp/Scheme program, ASCII text, with CRLF line terminators
   #+end_example

* DONE Week 4: Python web server, IP addresses
#+attr_html: :width 600px:
[[../img/subnets.png]]

- [X] Missing tests? Complete this week for 50%
- [X] Review of *Data Encapsulation*
- [X] Practice exercise: Python web server
- [ ] DataCamp review: Understanding cloud computing
- [ ] Continue with IP addresses and subnets
- [ ] Home assignment: Build a Cisco network

** Review - Data Encapsulation

Check if you can answer these questions and attach a command-line
application, an image, or some other code to the relevant step.

1. What is data encapsulation in networking? Why is it important?
   #+begin_quote
   Data encapsulation is the process of wrapping data (e.g. text) with
   protocol-specific meta data (headers and footers) as it moves
   through the TCP/IP network stack.

   Data encapsulation allows modular communication, ensuring that
   higher layers (e.g., web applications) do not need to manage
   lower-level details (e.g., TCP, IP, Ethernet).
   #+end_quote
   #+attr_html: :width 200px:
   [[../img/ip_to_ethernet.png]]

2. Give a step by step data encapsulation breakdown for a web request
   by TCP/IP layer.
   #+begin_quote
   | *LAYER*             | *ENCAPSULATION*                                               |
   |-------------------+-------------------------------------------------------------|
   | Application Layer | A HTTP request is generated by the web browser              |
   | Transport Layer   | TCP segments add sequence numbers and reliability checks    |
   | Network Layer     | Segment is wrapped in an IP packet with destination address |
   | Data Link Layer   | Packet is encapsulated in Ethernet frame with MAC address   |
   | Physical Layer    | Frame is converted into signals for transmission            |
   #+end_quote

3. Why can't a web browser directly send an HTML file over the
   network?
   #+begin_quote
   The web browser cannot send an HTML file directly because the
   network requires structure communication protocols:
   - HTML content must be included in a HTTP response
   - HTTP response must be encapsulated in a TCP segment
   - TCP segment must be wrapped inside an IP packet
   - IP packet must be placed in an Ethernet frame for transmission.
   #+end_quote
   #+begin_example
   HTTP/1.1 200 OK
   Date: Fri, 17 Jan 2025 10:00:00 GMT
   Content-Type: text/html; charset=UTF-8
   Content-Length: 1234
   Connection: keep-alive
   Server: Apache/2.4.54 (Unix)
   #+end_example

4. What role does TCP play in the encapsulation process when
   transmitting a web page?
   #+begin_quote
   TCP (Transmission Control Protocol) ensures that the HTTP response
   (which contains the HTML page) is reliably delivered. It segments
   large data into smaller chunks, ensures in-order delivery,
   retransmits lost packets, and manages congestion. The TCP segment
   is then passed down to the IP layer for addressing and routing.
   #+end_quote
   #+attr_html: :width 700px:
   [[../img/socket.svg]]

5. How does a router handle an encapsulated HTTP response as it
   forwards it to the destination?
   #+begin_quote
   The router checks the IP packet's destination address and
   determines the nex best hop. It forwards the packet based on
   routing tables, strips the previous Ethernet frame and encapsulates
   the IP packet in a new frame for the next network segment.
   #+end_quote
   #+begin_src bash :results output :exports both
     traceroute lyon.edu
   #+end_src

6. How can you observe real-time data encapsulation happening on your
   network? What is a condition to do this?
   #+begin_quote
   You can use tools like =tcpdump= or Wireshark (=tshark=) to capture
   packets in real-time. Running =sudo tcpdump -i eth0 -vv= allows you
   to see Ethernet frames, IP packets, and TCP segments, revealing the
   encapsulated layers as data moves through the network.

   A condition to do this is that you have =sudo= rights because the
   information could easily be used to design an efficient network
   attack.
   #+end_quote
   #+begin_src bash :results output :exports both
     ip link show
     nmcli device status
     # sudo tcpdump -i [device] -vv -X
   #+end_src



** Review: Python web server

We're going to review the content first, and then we'll look at the
exercise again.

1. What was the exercise about?
   #+begin_quote
   - Starting a web server, using it, shutting it down.
   - Exploring the =localhost= destination address.
   - Understanding how to use ports with web requests.
   - Finding stuff out by yourself instead of being told everything.
   #+end_quote

2. What exactly does a web server do?
   #+begin_quote
   The web server listens for incoming HTTP requests on a specific
   port and responds by serving files or handling requests. In this
   case, the Python HTTP server serves files from the specified
   directory to clients like web browsers.
   #+end_quote

3. What function does =curl= have?
   #+begin_quote
   The =curl= command is a /client/ of the server - it makes an HTTP
   request that the server fulfils.
   #+end_quote

4. What exactly is the port number?
   #+begin_quote
   The port number is a specific communication endpoint on a computer
   that allows network services to operate. It helps direct internet
   traffic to the correct application. For example, in
   =http://localhost:8080=, port =8080= is where the web server listens
   for requests.
   #+end_quote

5. What were the implications of using a different port number?
   #+begin_quote
   Requests on a different port than the one specified when the server
   was started are not fulfilled. A new server that listens on that
   port must be started.
   #+end_quote

6. What are the implications of repeating the =python3= command?
   #+begin_quote
   You get an "address already in use" error. To use the same port,
   you have to shut the server down, or you must change the port.
   #+end_quote

7. Could this web server be used from outside of the computer?
   #+begin_quote
   By default, the Python HTTP server listens on =localhost=, meaning it
   can only be accessed from the same computer. However, if started
   with =python3 -m http.server 8080 --bind 0.0.0.0=, it would be
   accessible from other devices on the same network (now it is bound
   to the default gateway). To make it accessible over the internet,
   additional steps like firewall configuration and port forwarding
   would be needed.
   #+end_quote

8. How can the web server be shut down?
   #+begin_quote
   You can kill the terminal where it was started, or you can shut it
   down explicitly using the =PID=, the process number, which you get
   with =ps=. You can then =kill= the process. Or you can use =pkill= on
   (part of) the process name.
   #+end_quote

9. What is a daemon? What is an example?
   #+begin_quote
   A daemon is a service program that sits in the background listening
   to requests related to a persistent process. When a request is
   made, the daemon wakes the process. A daemon cannot be communicated
   with directly (except that it can be started, shut down, and asked
   for a status).

   An example is =systemd=, a daemon that initializes the system and
   manages other daemons.
   #+end_quote

10. Does the Python web server =http.server= have a daemon?
    #+begin_quote
    No it does not because it is not a persistent system service. It
    can be put in the background itself with =&= but it ends when the
    terminal session ends or when the process is killed.
    #+end_quote


** Practice: Python web server

Download and complete: [[https://tinyurl.com/3-networks-practice-org][tinyurl.com/3-networks-practice-org]]

Upload your solution to Canvas before we discuss it.

1. Find out if your =localhost= is active.
2. Start a simple web server (=python3=) and retrieve data using (=curl=).
3. Find out which IP address corresponds to =localhost=.
4. Find out what happens if you change the port number
5. Change the directory information served by the server.
6. Shut down the web server(s).


** Test 2 coming up (stuff from the last week)

- Remember that Test 1 will only be open until tonight!


** Home assignment: Build a Cisco network

*How?* You need to install Cisco Packet Tracer on your PC unless you
want to have to come to the lab in Lyon 104. Ask for help if needed.

*Why?* This is a review of the short packet tracer demo from week 1, and
a preparation for looking at Cisco network switches, MAC address
tables, and the ARP protocol used to map IP addresses to a MAC
address.

*What?* Build the following network in Cisco Packet Tracer, test it and
upload the =.pkt= file to Canvas (Deadline: Monday 10 February, 11 am).

Demo: How to switch off automatic labeling and create notes.

#+attr_html: :width 400px:
[[../img/pt_network.png]]

*Requires:*
1) Creating network hosts
2) Setting static IP addresses, subnet masks, MAC addresses
3) Testing the network with your own "hello world" HTML file
5) Saving the network configuration and upload to Canvas


** DataCamp review: Cloud Providers and Case Studies

1. Which cloud provider has the largest market share as of the lesson?
   Do you still remember what this means in terms of revenue?

   #+BEGIN_QUOTE
   Amazon Web Services (AWS) holds the largest market share at 31%,
   followed by Microsoft Azure at 24% and Google Cloud at 11%.

   AWS revenue is $90 bn while Amazon's total revenue is $574 bn (15%)
   #+END_QUOTE

2. What is a key advantage of Microsoft Azure in the cloud market?

   #+BEGIN_QUOTE
   Azure benefits from strong integration with Microsoft products
   (customer "lock-in"), making it a top-of-mind choice for
   enterprises already using Microsoft services (such as: MS Windows,
   MS Office, MS SQL server).
   #+END_QUOTE

3. What cloud service does Amazon SageMaker provide? How long would it
   take to learn how to use it (for someone new to ML)?

   #+BEGIN_QUOTE
   Amazon SageMaker is a cloud machine learning platform that helps
   "organizations streamline machine learning processes".

   ChatGPT breaks the training down and estimates 4-8 weeks for
   someone who is new to Machine Learning. Sounds like a summer job!

   If you have 4-8 weeks, better work through an ML book (with code).
   #+END_QUOTE

4. Which Google Cloud service is specifically designed for data
   warehousing? How long would it take to learn?

   #+BEGIN_QUOTE
   BigQuery is Google Cloud's data warehousing service, designed for
   large-scale data analytics - uses SQL.

   ChatGPT estimates that a total beginner (no SQL, data warehousing
   or Google Cloud knowledge) needs 4-6 weeks to learn to use it.
   #+END_QUOTE

5. In the AWS case study, what improvement did NerdWallet experience
   after adopting Amazon SageMaker? What questions would you have?

   #+BEGIN_QUOTE
   NerdWallet used Amazon SageMaker to significantly reduce *training
   times* to days and cut *costs* by 75%, "modernizing their data science
   practices".

   Important questions: What company is this? What's their business?
   How long did it take them? How long was the case study?
   #+END_QUOTE

6. What could be the case against cloud computing?

   #+begin_quote
   Chapters of the "CIO" article of the same title (2009):
   - Migrating apps (cost, knowledge, skills)
   - Managing risk (loss of data, loss of control)
   - Meeting SLAs (Service Level Agreements)
   - TCO (Total Cost of Ownership)
   #+end_quote

* DONE Week 5: Switches, address resolution
#+attr_html: :width 400px:
[[../img/monks.png]]

- [X] *Lab*: Anatomy of a switch and the IOS-XE shell
- [X] *Lab*: Address Resolution with ARP (simulation)
- [X] *Lecture*: Broadcasting across a Cisco network

** Project proposal submissions

- Everybody submitted on time (never happened before)
- You should add your project to the Canvas pages
- You should put your submission into GDrive
- You should submit the URL to Canvas (1 per team)

** Review: The ol' switcheroo

1. What do you know about the network switch?
   #+begin_quote
   - It connects network hosts "intelligently" (not a hub)
   - It runs a stripped down version of Linux with a CLI.
   - The CLI has three access levels: user, privilege, configure.
   - The CLI has auto-completion (Type =sh=)
   #+end_quote

2. How can you see which commands the CLI has?
   #+begin_quote
   Type =?= at any level of access.
   #+end_quote

3. What's the name of the switch?
   #+begin_quote
   You can give it any name you like with the =hostname= command.
   #+end_quote

4. Why does it take so long for the switch to start?
   #+begin_quote
   It has to boot the Linux OS! (IOS XE)
   #+end_quote

5. How can you change the name of the switch?
   #+begin_quote
   On the CLI. You have to =enable= privileged user level, then enter
   =config terminal= mode, then you can set =hostname= to anything you
   like.
   #+end_quote

6. What does the switch know when it first wakes up?
   #+begin_quote
   The switch only knows its name and which =interface= it is connected
   to. You can see that with =show ip interface brief=.
   #+end_quote

7. Does the switch know anything about other physical devices?
   #+begin_quote
   No. You can see that with =show mac address-table=.
   #+end_quote

8. Does the switch know anything about the network at all?
   #+begin_quote
   Yes! It knows the IP addresses of other hosts, which you can check
   with =ping=.
   #+end_quote

9. How can the switch learn more about the network? How do we know?
   #+begin_quote
   When you =ping= hosts from other hosts, or when you open applications
   that require a network connection (e.g. HTTP request), the MAC
   address table is populated.
   #+end_quote

10. Does the switch have an IP address?
    #+begin_quote
    No - a layer 2 (host-to-host) switch does not need one. A Layer 3
    (network) switch is a router and needs an IP address (more later).
    #+end_quote

** Review: Playing the ARP
#+attr_html: :width 400px:
[[../img/harp.jpg]]

1. Do all networked devices need MAC addresses?
   #+begin_quote
   No. MAC addresses are used to identify multiple devices on a single
   (switched) network, usually connected via Ethernet. When devices
   are directly connected (e.g. via serial cable) there is no need for
   a MAC address.
   #+end_quote

2. What does ARP stand for and what does it do?
   #+begin_quote
   The Address Resolution Protocol is a network protocol used to map
   an IP address to a corresponding MAC address in a local network.
   #+end_quote

3. At which level of the network model does ARP operate?
   #+begin_quote
   ARP operates at the data link layer (layer 2) of the OSI model but
   interacts with the network layer (layer 3).
   #+end_quote

4. How exactly does ARP operate?
   #+begin_quote
   When a device wants to send data to another device on the same
   network:
   1) it checks its ARP table (storing IP-to-MAC mappings)
   2) if it doesn't find the destination IP address, it broadcasts an
      ARP request on the network
   3) The device with the matching IP address responds with an ARP
      reply and provides its MAC address
   4) The sender updates its ARP table and sends the data.

   An ARP request is a raw Ethernet frame with an ARP packet inside,
   realized as a raw (direct access) socket whose header must be
   constructed manually.
   #+end_quote

5. What could go wrong with this in terms of security?
   #+begin_quote
   ARP does not have built-in authenticication - attackers can send
   fake ARP replies to associate their MAC address with another
   device's IP: this is the so-called "Man-in-the-Middle" attack.
   #+end_quote

6. What exactly then is a "network protocol"?
   #+begin_quote
   A network protocol is a set of rules and conventions that define
   how data is formatted, addressed, transmitted, how errors are
   detected and handled, and how devices establish and terminate
   communication.
   #+end_quote

7. How can you see the ARP table?
   #+begin_quote
   To see the ARP table for a specific device, enter =arp -a= on the
   Windows shell (need admin rights), or on the PowerShell, or on
   Linux use =ip neigh show=.
   #+end_quote

8. Where is the ARP table located?
   #+begin_quote
   ARP tables are local to each machine. When a device needs to
   communicate, it resolves MAC addresses via ARP request and stores
   the result in its own ARP table.
   #+end_quote

9. How can I see the ARP table on a Linux shell?
   #+begin_src bash :results output :exports both
     ip neigh show
   #+end_src

   On my machine at home:
   #+begin_example
   : 192.168.1.254 dev enp4s0 lladdr 6c:4b:b4:6d:65:21 REACHABLE
   : 192.168.68.51 dev wlo1 lladdr ae:4b:fd:96:36:90 REACHABLE
   : 192.168.68.53 dev wlo1 lladdr 78:80:38:cc:71:98 REACHABLE
   : 192.168.68.1 dev wlo1 lladdr 60:83:e7:71:cb:50 STALE
   : 2600:1702:4ba0:4b0::1 dev enp4s0 lladdr 6c:4b:b4:6d:65:21 router STALE
   : fe80::6e4b:b4ff:fe6d:6521 dev enp4s0 lladdr 6c:4b:b4:6d:65:21 router REACHABLE
   #+end_example

10. Can you write a program to see the ARP table?
    #+begin_src C :results output
      #include <stdio.h>
      #include <stdlib.h>

      #define ARP_TABLE "/proc/net/arp" // standard Linux location

      int main() {
        FILE *file = fopen(ARP_TABLE, "r");
        if (!file) {
          perror("Failed to open ARP table");
          return 1;
        }

        char line[256];

        // Read and print the ARP table header
        if (fgets(line, sizeof(line), file)) {
          printf("ARP Table:\n%s", line);
        }

        // Read and print each ARP entry
        while (fgets(line, sizeof(line), file)) {
          printf("%s", line);
        }

        fclose(file);
        return 0;
      }
    #+end_src

    #+RESULTS:
    : ARP Table:
    : IP address       HW type     Flags       HW address            Mask     Device
    : 10.1.4.1         0x1         0x2         d4:77:98:f0:d9:7f     *        wlp0s20f3
    : 10.1.4.3         0x1         0x2         a4:10:b6:b1:42:9f     *        wlp0s20f3

    On my machine at home:
    #+begin_example
    : ARP Table:
    : IP address       HW type     Flags       HW address            Mask     Device
    : 192.168.1.254    0x1         0x2         6c:4b:b4:6d:65:21     *        enp4s0
    : 192.168.68.51    0x1         0x2         ae:4b:fd:96:36:90     *        wlo1
    : 192.168.68.53    0x1         0x2         78:80:38:cc:71:98     *        wlo1
    : 192.168.68.1     0x1         0x2         60:83:e7:71:cb:50     *        wlo1
    #+end_example

* DONE Week 6: Subnets and domains

*Home assignments all due by Friday 21 February:*
- [X] *Test*: Switches, Address resolution (40 questions - 60')
- [X] *Assignment*: Exploaring ARP and MAC address learning (30')
- [X] *Assignment*: Simulating ARP and HTTP events (30')

*Projects:*
- [X] Feedback on your proposals will be forthcoming this week.
- [X] There is no reason not to keep working on the project!
- [X] Next sprint review assignment is published ([[https://lyon.instructure.com/courses/3114/assignments/41958][Canvas]])

*Planning:*

- [X] *Lecture*: Subnets, domains, routing
- [ ] *Tests & Assignments*: Removing only 1 point per late day now.
- [ ] *Lecture:* Ports, client-server, sockets

** Review: Domains

1. Explain the term "IPv4"!
   #+begin_quote
   IPv4 stands for "Internet Protocol version 4", a way to write
   Internet addresses using 32 bits or 4 numbers of 8-bit length.
   #+end_quote

2. What is the smallest, and what is the largest IPv4 address?
   #+begin_quote
   Smallest: ~0.0.0.0~ to ~255.255.255.255~ (in decimals)
   #+end_quote

3. What is another name for the smallest IPv4 address?
   #+begin_quote
   The default gateway or default route.
   #+end_quote

4. What's special about the address ~127.0.0.1~?
   #+begin_quote
   It's the inet address for your own computer, also called localhost
   or loopback address.
   #+end_quote
   #+begin_src bash :results output :exports both
     ip address show | grep 127.0.0.1
   #+end_src

   #+RESULTS:
   :     inet 127.0.0.1/8 scope host lo

5. What does the ~/24~ after the IP address mean?
   #+begin_quote
   ~/24~ is the subnet mask in CIDR (Classless Inter-Domain Routing)
   notation. It means that the first 24 bits of the IP address are
   used for the network portion, leaving the remaining 8 bits for host
   addresses.

   Example ~192.168.1.0/24~:
   - network portion: ~192.168.1.~
   - hosts: ~0-255~
   #+end_quote

6. What is the long form of ~127.0.0.1/8~?
   #+begin_quote
   The first 8 bits (first section) is the network portion, and the
   remaining 24 bits (3 sections) are for host addresses. The long
   form (in decimal) is therefore: 127.0.0.1/255.0.0.0.
   #+end_quote

7. How many hosts can a =/18= subnet domain have?
   #+begin_quote
   1) Number of host bits: 32 - 18 = 14
   2) Total host addresses: 2^14 = 16,384
   3) Total usable hosts (excluding .0 and .1) = 16,382
   #+end_quote

8. How can you convert decimal 255 to binary using the command-line?
   #+begin_src bash :results output :exports both
     echo 'obase=2; ibase=10; 255' | bc  # using the bash calculator
   #+end_src

   #+RESULTS:
   : 11111111

9. What is the routing table and how can you see it on Linux?
   #+begin_quote
   A routing table is a table stored in a router (or host) that
   contains rules for directing network traffic. It lists:
   - destination networks (network layer)
   - next-hop gateway  (host-to-host layer)
   - interface to forward packets through (physical layer)
   #+end_quote
   #+begin_src bash :results output :exports both
     ip route show
   #+end_src

   #+RESULTS:
   : default via 10.1.4.1 dev wlp0s20f3 proto dhcp metric 600
   : 10.1.4.0/22 dev wlp0s20f3 proto kernel scope link src 10.1.4.252 metric 600
   : 169.254.0.0/16 dev wlp0s20f3 scope link metric 1000

   #+begin_src bash :results output :exports both
     netstat -r # this command is `deprecated`
   #+end_src

   #+RESULTS:
   : Kernel IP routing table
   : Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
   : default         _gateway        0.0.0.0         UG        0 0          0 wlp0s20f3
   : 10.1.4.0        0.0.0.0         255.255.252.0   U         0 0          0 wlp0s20f3
   : link-local      0.0.0.0         255.255.0.0     U         0 0          0 wlp0s20f3

   Example:
   #+begin_example
   $ ip route show
   default via 192.168.1.1 dev eth0 proto dhcp metric 100
   192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.100
   10.0.0.0/8 via 192.168.1.254 dev eth0
   #+end_example
   #+begin_quote
   *Default route:* ~default via 192.168.1.1 dev eth0 proto dhcp metric 100~
   1) default route is via ~192.168.1.1~ (router IP on the LAN)
   2) Uses Ethernet (~eth0~) interface
   3) Route was assigned via ~dhcp~ (Dynamic Host Configuration
      Protocol)
   4) =metric= indicates the cost or priority of a route (low=preferred)

   *Local network route:*
   ~192.168.1.0/24 dev eth0 proto kernel scope link src 192.168.1.100~
   1) Directly connected network (private address range).
   2) Traffic for the subnet goes through =eth0= (Ethernet cable)
   3) =proto kernel=: OS kernel adds address when interface is up
   4) =scope link=: a directly reachable network
   5) =src 192.168.1.100=: the local machine's assigned network IP

   *Static route to another network:*
   ~10.0.0.0/8 via 192.168.1.254 dev eth0~
   1) ~10.0.0.0/8~ is the destination network (any host ~10.x.x.x~)
   2) Traffic for the destination goes through ~192.168.1.254~
   3) Packets are sent via ~eth0~
   #+end_quote

10. What's the first step to find a route from your PC to ~google.com~?
    #+begin_quote
    The URL ~google.com~ must undergo Network Address Translation (NAT)
    before packets can be sent to the corresponding IP address. This
    includes finding public IP addresses and computing checksums.
    #+end_quote

* DONE Week 7: C review and listing network adapters from C

- [X] *Practice:* Revisit C programming 1: Hello World
- [ ] *Practice*: Revisit C programming 2: ("FizzBuzz", loops, ifelse)
- [X] *Lecture*: Networking sockets with C
- [ ] *Assignment*: Convert MAC addresses into binary
- [ ] *Assignment*: FizzBuzz Reloaded (functions, pointers, arrays)

** DONE Review - Sockets I

1. What's a socket?

2. What's it good for?

3. Where are they located?

4. Which language are sockets written in?

5. How are sockets written?

6. What's a file descriptor?


** DONE Enhanced Hello World program (assignment)

Remember: In C, ~argv~ is an array of strings where:
- ~argv[0]~ is the program name
- ~argv[1]~ is the first command-line argument etc.
- ~argc~ is the total number of arguments

Process:
1) [X] Program solution with arguments first
2) [X] Set up compile & run shell block
3) [X] Add one name as argument on the command-line
4) [X] Add the ~for~ loop to iterate over > 1 command-line argument
5) [X] Recreate sample output

Starter code:
#+begin_src C :main no :includes :tangle hello4.c :results output
  #include <stdio.h>

  int main(int argc, char *argv[])
  {
    // If no arguments are given, print "Hello, World!"
    if (argc <= 1) {
      printf("Hello, World!");
      // Otherwise, iterate through all names and print "Hello, [Name]!"
    } else {
      for (int i=1;i<argc; i++) {
        // print Hello, [name]!
        printf("Hello, %s!\n",argv[i]);
      }
    }
    return 0;
  }
#+end_src

#+RESULTS:
: Hello, World!

Shell block for testing:
#+begin_src bash :results output
  ls -lt hello4*    ## list files time-ordered in long format
  gcc hello4.c -o hello4
  ./hello4 Alice Bob Charlie
#+end_src

#+RESULTS:
: -rw-rw-r-- 1 marcus marcus   365 Feb 28 11:22 hello4.c
: -rwxrwxr-x 1 marcus marcus 15960 Feb 28 11:21 hello4
: Hello, Alice!
: Hello, Bob!
: Hello, Charlie!

- To debug, add the ~-g~ flag to the compilation, this produces a file
  ready for debugging with ~gdb~, the GNU Debugger.

* DONE Week 8: Network interfacing with sockets

- [X] Test 4 deadline extended to March 10 (midterm: 12-Mar)
- [X] Two small assignments until our next session (Wednesday)
- [X] Review: Network interface listing with C
- [X] Exercises: Network interface listing with C

** Mandatory Programming assignments

These programs are meant to lay the foundation for an appreciation of
system programming with C.

- Reading from a file using a handle.
- Reading from a file using a file descriptor.
- Hard deadline March 10 (because of midterms: 12-Mar)

** Optional programming assignments

- Download and complete: [[https://tinyurl.com/fizzbuzz-practice][tinyurl.com/fizzbuzz-practice]].
- Fizzbuzz reloaded: functions returning strings & arrays.
- Conversion of hexadecimal MAC address to binary (~switch~)

** Review: Home assignments
*** Sample Solution: Adding Inline Comments to `unix_list.c`

- *Assignment*: "Add inline comments // to the file `unix_list.c` to say
  what it does - be as specific as you need to be so that someone else
  (or you in the future) can understand what is going on."

- *Approach*: Comment each logical step, explaining purpose and
  details - this shows that "literate programming" does not replace
  insightful comments. Alas, in languages like C/C++ you need both.

  #+begin_src C :tangle unix_list_commented.c
    /****************************************/
    // MIT License
    // ... (license text unchanged) ...
    /****************************************/
    #include <sys/socket.h>  // For socket structs (sockaddr) and address families (AF_INET)
    #include <netdb.h>       // For getnameinfo() to convert addresses to strings
    #include <ifaddrs.h>     // For getifaddrs() and struct ifaddrs to list interfaces
    #include <stdio.h>       // For printf() to display output
    #include <stdlib.h>      // For exit codes (EXIT_FAILURE) and freeifaddrs()

    int main() {
      struct ifaddrs *addresses;  // Pointer to linked list of network interfaces

      // Get all network interfaces; store in addresses; -1 means failure
      if (getifaddrs(&addresses) == -1) {
        printf("getifaddrs call failed\n");  // Print error if fetching interfaces fails
        return -1;                           // Exit with error code (non-zero)
      }

      struct ifaddrs *address = addresses;  // Working pointer to traverse the list
      while (address != NULL) {             // Loop through all interfaces until NULL
        if (address->ifa_addr == NULL) {    // Skip if no address assigned (inactive)
          address = address->ifa_next;      // Move to next interface in list
          continue;                         // Restart loop
        }
        // Get address family (e.g., AF_INET for IPv4, AF_INET6 for IPv6)
        int family = address->ifa_addr->sa_family;
        if (family == AF_INET || family == AF_INET6) {  // Filter for IP addresses only
          printf("%s\t", address->ifa_name);            // Print interface name (e.g., lo)
          // Print address type: IPv4 or IPv6, based on family
          printf("%s\t", family == AF_INET ? "IPv4" : "IPv6");

          char ap[100];  // Buffer for address string (up to 100 chars)
          // Set size of address struct: 16 bytes for IPv4, 28 for IPv6
          const int family_size = family == AF_INET ?
            sizeof(struct sockaddr_in) : sizeof(struct sockaddr_in6);
          // Convert binary address to string (e.g., 127.0.0.1); NI_NUMERICHOST avoids DNS
          getnameinfo(address->ifa_addr, family_size, ap, sizeof(ap), 0, 0, NI_NUMERICHOST);
          printf("\t%s\n", ap);  // Print the address with tab and newline
        }
        address = address->ifa_next;  // Advance to next interface
      }

      freeifaddrs(addresses);  // Free memory allocated by getifaddrs()
      return EXIT_SUCCESS;     // Exit successfully (zero)
    }
  #+end_src

  #+RESULTS:
  | lo        | IPv4 |   |                           127.0.0.1 |
  | wlp0s20f3 | IPv4 |   |                           10.1.6.35 |
  | lo        | IPv6 |   |                                 ::1 |
  | wlp0s20f3 | IPv6 |   | fe80::28f6:cc78:32ae:3b68%wlp0s20f3 |

- *Notes*:
  - Comments explain *what* (e.g., “Print interface name”) and *why* (e.g., “avoids DNS”).
  - Specifics like struct sizes (16, 28 bytes) and `NI_NUMERICHOST` clarify intent.
  - Keeps it readable—future you or a peer can follow the flow.

- *Test*:
  Tangle (C-c C-v t), compile (`gcc -o unix_list_commented unix_list_commented.c`), run (`./unix_list_commented`).


*** Sample Solution: Differences Between Linux Manual Pages for Socket

- *Task*: Find the two Linux manual pages for "socket" and figure out
  their differences.

- *Answer*:

  - Two pages: =socket(2)= (173 lines) and =socket(7)= (462 lines).

  - *socket(2)*: System call to create a socket (e.g., =socket(AF_INET,
    SOCK_STREAM, 0)=). Focuses on usage—args like =domain=, =type=,
    =protocol=, and errors. *For coding.*

  - *socket(7)*: Overview of the socket interface. Covers concepts
    (e.g., =AF_INET=, =SOCK_STREAM=), options (e.g., =SO_REUSEADDR=), and
    related calls (e.g., =bind=). *For understanding.*

  - *Key Difference*: =socket(2)= is "how to use it"; =socket(7)= is "what
    it is and how it fits."

- *Check*: Run =man 2 socket= and =man 7 socket= in Emacs (=M-!=).

** Review: Network interface listing with C

1. What's a NAT? And why do we need it?
   #+begin_quote
   Network Address Translation server: a program that translates
   LAN IP addresses to WAN IP addresses and vice versa.

   Reason: LANs have a reserved range of IPv4 addresses. For IPv6,
   there is no problem because the IPv6 address range is huge.
   #+end_quote

2. How can you get your public host IP address if you're behind a NAT?
   #+begin_quote
   You need to contact a public internet server (e.g. via browser)
   like ~ifconfig.me/ip~ or ~api.ipify.org~.
   #+end_quote

3. How are the elements of a ~socket~ being used during network traffic?
   #+begin_quote
   Separate APIs (Application Programming Interfaces) use each part of
   the ~socket~: Local and remote web server API, local system socket
   API (for IPv4 and DNS), and local network stack API (for TCP/IP).
   #+end_quote

4. When listing local IP addresses - are there portability issues?
   #+begin_quote
   All things networking are different between Windows and Unix-based
   system (Linux, MacOS). However, the preprocessor can take care of
   that by linking different header files.
   #+end_quote

5. What's the workflow for listing network addresses with C?
   #+begin_quote
   - Include system header files (~socket.h~, ~netdb.h~, ~ifaddrs.h~).
   - Get network interface addresses (~getifaddrs~, ~address->ifa_addr~).
   - Iterate through linked list of IP addresses (~addresses~).
   - Filter for IPv4 or IPv6 addresses (~AF_INET~)
   - Print network interface name and address type (~address->ifa_name~)
   - Convert binary IP address to string (~getnameinfo~)
   - Move to next network interface in the list (~address->ifa_next~)
   - Check if end of list is reached (~address != NULL~)
   - When list is finished, free allocated memory (~freeifaddrs~)
   #+end_quote

6. How can you compare strings in C?
   #+begin_example C
   #include <string.h>  // contains string manipulating functions
   strcmp(string1,string2);  // compares `string1` and `string2`
   #+end_example

7. What does this code fragment achieve?
   #+begin_example C
   // declare IPv4 and IPv6 address counters and increment them
   int ipv4 = 0, ipv6 = 0;
   if (family == AF_INET) ipv4++; else ipv6++;
   #+end_example

8. Where would you look for the definition of ~ifa_flags~?
   #+begin_quote
   ~ifa_flags~ is part of the ~ifaddrs~ data structure. You can find the
   definitions in the man page for ~netdevice(7)~.
   #+end_quote

9. How would you print ~address->ifa_flags~?
   #+begin_src C
     // print unsigned integer with `%u`
     printf("\tFlags: %u\n", address->ifa_flags);
   #+end_src

10. Why might ~unix_list.c~ fail to list all interfaces shown by ~ip addr
    show~?
    #+begin_quote
    ~unix_list.c~ only lists interfaces with assigned IPv4 or IPv6
    addresses (checks ~ifa_addr~ and filters for ~AF_INET~, ~AF_INET6~).

    ~ip addr show~ includes all interfaces, even those without IPs
    (e.g., DOWN or non-IP protocols like ~AF_PACKET~).
    #+end_quote

** Socket programming

- Posted very dense 10 minute tutorial "Minimal Web-server in C".
- We're heading towards: Socket API / HTML client / HTML server.
- Next week we'll continue with more Cisco Packet Tracer stuff.

- Two tasks until Wednesday:
  1) Comment the IP address listing program.
  2) Find out what the difference is between ~socket(2)~ and ~socket(7)~.

- I will then decide if/how much longer to torture you with C.
- Note: You really *do need to install Linux on your Windoze PC*.

* DONE Week 9: Socket exercises & TCP/IP in-depth I
#+attr_html: :width 400px :float nil:
[[../img/socketmaster.png]]

- [X] *New test* available. 35 questions, covers socket programming and
  material from various programming assignments and class exercises.

- [X] *Finish* socket programming exercises.

- [X] *Popquiz*: Subnet masks! Answer as many questions as you
  can. Solutions will be available as PDF in GitHub.

- [-] *TCP/IP*: Back to Cisco Packet Tracer with a larger network to
  investigate the interface between layer 3 and layer 4.
  1) [X] Bits, frames, packets, segments
  2) [X] HTTP capture
  3) [X] Network ports
  4) [ ] FTP and Email capture

** Socket programming exercises

- Get the file ~unix-list.c~ from the web:
  #+begin_example
  wget -O unix_list.c tinyurl.com/unix-list-c
  #+end_example

- Create an Org-mode file ~unix-list.org~.

- Insert the C file into a C block in the Org-mode file.

- Run the file to make sure it works, then follow instructions.

** Popquiz (handout) Subnetmask/CIDR

- An IPv4 IP address has 32-bit length (4x8-bit words/bytes/octets).
- The subnet mask says how many bit of the address are occupied.
- 255.255.255.0 (decimal) is 11111111.11111111.11111111.00000000
- The CIDR notation gives only the bit-length of the mask.
- You can use ~bc~ with ~ibase~ and ~obase~ for I/O to convert addresses.

An example: ~ip addr show~ shows =192.168.1.100/16= for your PC. How many
hosts are at most in the same broadcast domain (aka subnet)?
#+begin_quote
Answer: 32 = 16 + 16 -> there are at most 2^16 other hosts.
#+end_quote
The subnetmask for this network in full form is 255.255.0.0. or in
binary form: 11111111.11111111.11111111.000000000.00000000.

*Review questions:*
1. How many hosts can '10.12.1.0/24' have?
   #+begin_quote
   '/24' in CIDR notation: 24 x 1-bit + 8 x 1-bit. The first three
   byte of the address are masked (= not available) but the last byte
   is for any 8-bit or 2^8 host addresses (though 2 are reserved).
   #+end_quote
2. What host addresses are reserved?
   #+begin_quote
   The network address - e.g. 192.168.0.0 (used to identify the
   network from the outside)- and the broadcast address -
   e.g. 192.168.255.255 (used to send packets to network hosts)..
   #+end_quote
3. What kind of domain is '10.12.1.0/24'?
   #+begin_quote
   An IP address reserved for private or Local Area Networks: private
   households or small businesses.
   #+end_quote
4. What's the public IP address for '10.12.1.0/24'?
   #+begin_quote
   The network does not have a public IP address, only the gateway
   computer has one (on IPv4). You can find it by opening one of the
   public IP address API servers in a browser (e.g. api.ipfy.org).
   #+end_quote
5. When you have the public address of a network, can you send data to
   private host computers on that network?
   #+begin_quote
   Not without being allowed in, and rerouted by the router to that
   network. The router also serves as the local default gateway.
   #+end_quote
6. How are public IPc4 addresses converted into local ones and vice
   versa?
   #+begin_quote
   A NAT (Network Address Translation) server must be running. You can
   check with ~iptables~ (=sudo iptables -t nat -L -v -n=) if a local NAT
   server is there but most likely it is running on the router
   (default gateway).
   #+end_quote
7. What is the subnet mask in dotted-decimal notation for a '/20' CIDR
   prefix? How many hosts are available?
   #+begin_quote
   - Break the IP address into 4 octets (32 bits)
   - 20 * 1-bit = 8 + 8 + 4 are masked:
     11111111.11111111.1111000.00000000 =  255.255.240.0 because
   - 11110000 = 2^4+2^5+2^6+2^7 = 16 + 32+ 64 + 128 = 240
   - Available hosts on this network: 2^4+2^8-2 = 16+256-2 = 270
   #+end_quote
8. Confirm the result of the previous question with a ~bc~ calculation,
   converting the binary subnet mask into a decimal.
   #+begin_src bash :results output :exports both
     echo "ibase=10;obase=2;240" | bc
     echo "ibase=2;11110000" | bc
   #+end_src

   #+RESULTS:
   : 11110000
   : 240

9. What happens if two devices on different networks are manually
   assigned the same private IP address (e.g. 192.168.1.1).
   #+begin_quote
   This results in a routing issue because IP addresses on the same
   subnet must have different IP addresses.
   #+end_quote
10. How many subnets can be created by borrowing 2 bits from the host
    portion of a /24 network and add them to the network portion?
    #+begin_quote
    - A /24 network has 2^8-2=254 available IP addresses, ranging
      e.g. from 192.168.1.1 to 192.168.1.254.
    - Borrowing two bits means we take 2 bits from the last 8 bits and
      add them to the network portion: The new subnetmask is /24 + 2 =
      /26, the new host portion is 32-26=6 or 2^6-2 = 62 hosts.
    - /26 corresponds to 11111111.11111111.11111111.11000000
      (255.255.255.192) because 2^7+2^6=128+64=192.
    #+end_quote

** TCP/IP "deep dive"

Practical TCP/IP Model:
1) ARP request
2) Bits, Frames, Packets, Segments
3) HTTP capture
4) Port numbers/IANA

* DONE Week 10: TCP/IP in-depth II - SMTP, FTP, Packet Loss Recovery
#+attr_html: :width 400px :float nil:
[[../img/protocols.png]]

- [X] Review: Models, layers, and units
- [X] Why does TCP keep sending segments?
- [ ] How does TCP recover lost packets? (Home assignment - Apr 3)
- [ ] What do different network applications require?
- [ ] How are E-mail and FTP captured? (Home assignment)

** Review

1. What is the name of layer 2 of the TCP/IP model? (Assume 5 layer
   model)
   #+BEGIN_QUOTE
   The name of layer 2 of the TCP/IP model (5-layer model) is the Data
   Link layer.
   #+END_QUOTE

2. What is the name of layer 3 of the TCP/IP model? (Assume 5 layer model)
   #+BEGIN_QUOTE
   The name of layer 3 of the TCP/IP model (5-layer model) is the
   Network layer.
   #+END_QUOTE

3. At which layer of the TCP/IP model is the Transport layer?
   #+BEGIN_QUOTE
   The Transport layer of the TCP/IP model is at layer 4 (5-layer
   model).
   #+END_QUOTE

4. Which layers of the TCP/IP model does Cisco Packet Tracer use?
   #+BEGIN_QUOTE
   - Cisco Packet Tracer uses the OSI layers (adds "Session" and
     "Presentation")

   - The CCNA Exam TCP/IP model uses all five layers: Physical, Data
     Link, Network, Transport, and Application.
   #+END_QUOTE

5. At which layer are bits used?
   #+BEGIN_QUOTE
   Bits are used at layer 1, the Physical layer.
   #+END_QUOTE

6. At which layer are packets used?
   #+BEGIN_QUOTE
   Packets are used at layer 3, the Network layer.
   #+END_QUOTE

7. At which layer are segments used?
   #+BEGIN_QUOTE
   Segments are used at layer 4, the Transport layer.
   #+END_QUOTE

8. Which of the following are Layer 3 addresses?
   #+BEGIN_QUOTE
   Layer 3 addresses are IP addresses (e.g., IPv4 or IPv6 addresses).
   #+END_QUOTE

9. Which of the following are Layer 7 (OSI) or 5 (TCP/IP) protocols?
   #+BEGIN_QUOTE
   Layer 7 protocols include HTTP, HTTPS, FTP, and SMTP (Application
   layer protocols).
   #+END_QUOTE

10. Which Protocol Data Unit (PDU) is used at the data link layer?
    #+BEGIN_QUOTE
    The Protocol Data Unit (PDU) used at the Data Link layer is a
    [ethernet] frame.
    #+END_QUOTE

11. Which Protocol Data Unit (PDU) is used at the transport layer?
    #+BEGIN_QUOTE
    The Protocol Data Unit (PDU) used at the Transport layer is a
    segment (for TCP) or datagram (for UDP).
    #+END_QUOTE

12. Which Protocol Data Unit (PDU) is used at the network layer?
    #+BEGIN_QUOTE
    The Protocol Data Unit (PDU) used at the Network layer is a
    packet.
    #+END_QUOTE

** TCP/IP Deep Dive Continued

1) Open Cisco Packet Tracer (re-enter credentials).
2) Load network packet file (=TCP_IP_OSI_Model.pkt=).
3) Open Web Browser on PC0.
4) Switch dashboard to =Simulation=.
5) Enter Server1 web address =10.1.1.100= and click =Go=
6) Watch simulation until only TCP traffic comes.

** Review: TCP handshakes, Transport Flags, and HTTP capture or non-capture

1. What happens when the network is first powered up?
   #+begin_quote
   The Ethernet connections (physical layer) are activated.
   #+end_quote

2. What happens when you request a web page via HTTP for the first
   time after the network is powered up?
   #+begin_quote
   An ARP request is broadcast to all hosts on the network to identify
   if there is a host with the requested IP address.
   #+end_quote

3. What is the purpose of the TCP 3-way handshake, and what flags are
   set in each step?
   #+BEGIN_QUOTE
   The TCP 3-way handshake establishes a reliable connection; the
   steps are SYN (0x02) from the client, SYN+ACK (0x12) from the
   server, and ACK (0x10) from the client.
   #+END_QUOTE

4. Why does TCP continue sending segments after an HTTP request is
   completed?
   #+BEGIN_QUOTE
   TCP sends additional segments after an HTTP request for reliability
   (ACKs to confirm data receipt) and connection closure (FIN/ACK
   sequence in the 4-way handshake).)
   #+END_QUOTE

5. What does the RST+ACK segment indicate in a failed HTTP request
   scenario in Packet Tracer?
   #+BEGIN_QUOTE
   The RST+ACK segment indicates that the TCP connection to the server
   (e.g., 10.1.1.99:80, or 10.1.1.100:8080) was forcibly terminated,
   refusing the connection, and the state is set to CLOSED.
   #+END_QUOTE

6. How does the TCP 4-way handshake work to close a connection, and
   what flags are involved?
   #+BEGIN_QUOTE
   The TCP 4-way handshake closes the connection with the server
   sending FIN (0x01), the client responding with ACK (0x10), the
   client sending its own FIN (0x01), and the server sending a final
   ACK (0x10).
   #+END_QUOTE

7. What role do sequence and acknowledgment numbers play in TCP
   communication, and how are they used in Packet Tracer?
   #+BEGIN_QUOTE
   Sequence numbers track the sender’s data stream, while
   acknowledgment numbers confirm receipt; in Packet Tracer, for
   example, a server sending data with Seq: 0 and Len: 1460 gets an
   ACK from the client with =Acknowledgement: 1460=.
   #+END_QUOTE

8. What is the role of TCP acknowledgments (ACKs) after an HTTP
   response, and how do they appear in Packet Tracer?
   #+BEGIN_QUOTE
   TCP ACKs confirm receipt of data segments after an HTTP response;
   in Packet Tracer, they appear as standalone TCP segments with the
   ACK =Flag= (0x10) and no HTTP payload, just headers.
   #+END_QUOTE

9. How does =HTTP/1.1 keep-alive= affect TCP traffic, and what might you
   observe in Packet Tracer?
   #+BEGIN_QUOTE
   =HTTP/1.1 keep-alive= keeps the TCP connection open for additional
   requests (e.g., for images), leading to idle TCP segments like
   keep-alive probes or window updates in Packet Tracer.
   #+END_QUOTE

10. What happens to the TCP connection state when a device receives a
    RST+ACK segment, and why might this occur?
    #+BEGIN_QUOTE
    The TCP connection state is set to CLOSED when a RST+ACK segment
    is received, indicating the connection was forcibly terminated,
    possibly due to the server refusing the connection, or because it is
    not listening on the specified port.
    #+END_QUOTE

** HTTP Reset

1) [X] Load the network, start the simulation, advance it.
2) [X] Look at the last TCP entries in the OSI Model view.
3) [X] Close the browser and reset the simulation.

* DONE Week 11: Socket API: client/server application (localhost)

- [X] *Test 5* ("socket programming") is due Friday April 4 (35 Qs).
- [X] *Home assignment:* FTP capture assignment is due Friday, April 4.
- [X] *Review*: 2nd Sprint Review (Literature Review with NotebookLM)
- [X] *Coding practice:* Client-server connection over TCP.
- [X] *Lecture*: Socket functions, TCP and UDP program flow.
- [ ] *Practice:* Networking a simple time-telling program.
- [ ] *Lecture/Practice:* Building code with GNU ~make~ .

** 2nd Sprint Review (I feel a sermon coming on...)
#+attr_html: :width 400px :float nil:
[[../img/doge.png]]

*** Grading (boring but required)

- *Grading criteria*: Full points only for fulfilling all requests
  1) Find at least one scholarly article (doi)
  2) Build and share a litmap
  3) Add new references (ideally from the litmap)
  4) Upload (improved) proposal to NotebookLM
  5) Create podcast with NotebookLM
  6) Share NotebookLM with me (email)
  7) Submit NotebookLM link to Canvas
  8) Upload podcast to GDrive
  9) Share podcast on GChat
  10) Work with NotebookLM using your sources

- *Observations (CSC 410):*
  1. Uploaded the litmap but not any of the sources: the AI cannot
     guess your content. You have to upload the source itself (10%).
  2. No signs of having worked with the source material, for example
     by asking questions suggested by the AI (10%).
  3. No signs of having worked with the podcast.
  4. Late submission (50%)

*** Lessons (important but difficult)

- *Lessons*: What did you learn?
  1. Understood the limit of my technical knowledge on the topic.
  2. Don't like listening to the podcast (people talking).
  3. I found out that the data I needed are unavailable.
  4. Learnt something about playing a networked game via TCP.
  5. It's difficult to find scholarly source for small practical projects.
  6. I found out how difficult networking an application is.
  7. Different VPN protocols can affect speed and security.

- *My advice for you*:
  #+begin_quote
  1. Unless you don't want to work in IT, you must develop minimal
     research skills: You don't have to be able to produce original
     papers yourself but you have to be able to find, read, understand
     recent publications.
  2. You should develop this skill while you have time, leisure and
     export guidance from me at your hands.
  3. AI will not take the burden of research from you - because of
     hallucations and because of the complexity of innovation, only
     expert use of the AI can result in anything useful.
  4. If you're a senior, you need to develop and show enthusiasm for a
     400-level course (capstone) project - this is what will be
     expected from you in the real world - by putting in more than the
     absolute minimum.
  5. When working with clients (me), you need to make it as
     comfortable and as easy for the client to see your results. You
     need to communicate more than usual, ask for input proactively,
     etc. Otherwise the client will feel like your dentist does
     (except without getting paid as handsomely).)[fn:2].
  6. I will be looking for that in your next spring review (April
     14). In the real world, if no enthusiasm is visible, your project
     would be cancelled (and if you don't have another good project,
     you'd be cancelled, too).
  7. To work smart, you first have to work hard. There is no shortcut
     to developing process intelligence ("smart" work) other than by
     working your butt off and failing many times in the process.
  8. NotebookLM in particular is a closed environment: It only
     responds to the sources that you've fed to it. And it gets better
     it you put more time into the research.
  9. AI might be helpful to build motivation, automate service jobs,
     analyse your performance, and shorten the path to publication.
  10. Competent use of AI for research depends on your knowledge of
      the research process and the subject matter without AI.
  #+end_quote

*** Redemption (saving grace and grade)

- *Opportunity for redemption:* Extra credit
  #+attr_html: :width 400px :float nil:
  [[../img/talk.png]]

- *Submit a personal experience report:*
  #+begin_quote
  For my upcoming Faculty Colloquium ("AI - Research Muse or Research
  Tool?"), I need student input based on your experiences with using
  AI for research for *any* project (in school or outside of school).

  *Send me your experience reports* via email, please. Let me know for
  which course you want the extra bonus points. Get a DOGE plus
  badge. What I am looking for (you can use this as a template):

  1) Which AI tools have you used for research?
  2) Which ones did you like and why?
  3) Which ones did you not like and why not?
  4) What are you looking for in an AI research tool?
  5) What you do you think the future of research will look like (in
     the light of AI assistance)?
  6) Anything else you can think of - for example any changes if you
     already used NotebookLM last term.

  Length does not matter - I'm looking for your honest views. I may
  quote you in the talk (and/or in the followup paper) anonymously
  (unless you withold your permission).
  #+end_quote

- This will wipe out any losses you may have incurred from the 2nd
  sprint review (as long as the report is insightful - don't use AI to
  write it).

** FTP capture assignment
#+attr_html: :width 400px :float nil:
[[../img/ftp_capture_solution.png]]

** Client-server connection over TCP
#+attr_html: :width 400px :float nil:
[[../img/client_server.png]]

- Download the codealong file: [[https://tinyurl.com/api-code-along][tinyurl.com/api-code-along]]

- Update: Change the ~printf~ in =tcp_client.c= to ~perror~ (check the man
  page), and add the function call =dup2(1,2)= to redirect ~stderr~ to
  ~stdout~ from within the program.

- This is the same thing as =2>&1= on the shell: 1 is the system's file
  descriptor for the ~stdout~ data stream, and 2 is the file descriptor
  for the ~stderr~ data stream.

** Review: Socket Programming

For this section of the course, we'll keep a running tab of review
questions, adding to the bottom of the list whenever there's something
new worth knowing and/or reviewing.

1. What's the difference between a "client" and a "server" socket?
   #+begin_quote
   A client socket initiates a connection to a server, while a server
   socket listens for and accepts incoming connections.
   #+end_quote
2. What's the difference between a "client" and a "server" socket
   after socket creation?
   #+begin_quote
   After creation, the client socket connects, and the server socket
   binds, listens, and accepts. Both send and receive data packets.
   #+end_quote
3. What's the difference between a client and a server host?
   #+begin_quote
   The client makes service requests (e.g. "Open this web page"), and
   the server answers the request.
   #+end_quote
4. What are the conditions for a successful server response?
   #+begin_quote
   1) Physical network connection (layer 1)
   2) ARP request successful (layer 2)
   3) IP routing successful (layer 3)
   4) Socket established (layer 4)
   5) Application protocol successful (layer 7)
   #+end_quote
5. How does the network identify a socket?
   #+begin_quote
   The network refers to a socket using a tuple of information:
   - The IP address of the host machine (e.g. 192.168.0.100)
   - The port number of a specific application on the host (e.g. 80)
   - The transport protocol in use (TCP or UDP)

   For a connection-oriented protocol like TCP, a 5-tuple is required:
   IP addresses and port number of source and destination, protocol.
   #+end_quote

6. What are the three main function calls involved in the client-side
   socket workflow, and what is the purpose of each one in
   establishing and using a connection?
   #+BEGIN_QUOTE
   ~socket()~ creates a new socket, ~connect()~ establishes a connection
   to a remote server, and ~recv()~ receives data from the server once
   connected.
   #+END_QUOTE

7. In the provided TCP client socket code, what does the ~htons(PORT)~
   function do when setting up the ~server_address~ structure, and why
   is it necessary?
   #+BEGIN_QUOTE
   ~htons(PORT)~ converts the port number from host byte order to
   network byte order (big-endian), which is necessary for consistent
   communication across different systems.
   #+END_QUOTE

8. How does the example code check for a connection error after
   calling ~connect()~, and what happens if the connection fails?
   #+BEGIN_QUOTE
   The code checks if ~connection_status == -1~ after ~connect()~; if it
   fails, it calls ~perror("Connection error")~ to print an error
   message like "Connection refused."
   #+END_QUOTE

9. What is the role of the ~server_address~ structure in the TCP client
   socket code, and what are the three fields it must specify?
   #+BEGIN_QUOTE
   The ~server_address~ structure specifies the destination for the
   socket connection; it must include ~sin_family~ (protocol family,
   e.g., IPv4), ~sin_port~ (port number), and ~sin_addr~ (IP address).
   #+END_QUOTE

10. Why does the example code use ~AF_INET~ and ~SOCK_STREAM~ as arguments
    in the ~socket()~ function, and what do they represent?
    #+BEGIN_QUOTE
    ~AF_INET~ specifies the IPv4 protocol family, and ~SOCK_STREAM~
    indicates a TCP connection-oriented stream; they define the socket
    as using IPv4 and TCP for reliable data transfer.
    #+END_QUOTE

* DONE Week 12: GNU Make / Byte Order / TCP vs UDP

- [X] *Assignment*: A simple one-shot echo client/server
- [X] *Bonus Assignment:* A persistent echo server and client
- [X] *New test* on socket programming with client/server
- [X] *Lecture/practice:* Building programs with GNU ~make~
- [X] From host order to [[file:9_api.org::* Byte order][network byte order]] with ~htons~
- [X] *Lecture/practice:* TCP vs UDP program workflow
- [X] *Code along*: Networking a time-telling program
  
** Home assignment: One-shot echo server

- Task: Create a one-shot echo client/server app that exchanges one
  message each between client and server.

- Sequence diagram:
  #+begin_example
  Client (tcp_client.c)                 Server (tcp_server.c)
  ----------------------               ------------------------
  |                                  |
  | network_socket = socket()        | server_socket = socket()
  |                                  |
  | connect(network_socket) -------->| bind(server_socket)
  |                                  | listen(server_socket, CONN)
  |                                  | 
  |                                  | client_socket = accept(server_socket)
  | send(network_socket, echo) ----->| recv(client_socket, buffer)
  |                                  | printf("Client said: %s", buffer)
  | recv(network_socket, server_response)
  |<---------------------------------| send(client_socket, server_message)
  |                                  |
  | printf("Server said: ...")       |
  |                                  |
  | close(network_socket) ---------->| close(client_socket)
  |                                  | close(server_socket)
  #+end_example
  
- *Bonus assignment* (May 2): Persistent TCP echo server (more than one
  message).

** Review GNU make

- I redesigned the code along file
- Download the code along file again: [[https://tinyurl.com/gnu-make-org][tinyurl.com/gnu-make-org]]

*Review questions to warm up:*

1) What is GNU ~make~?
   #+begin_quote
   A free tool automates compilation, and avoids recompiling unchanged files
   #+end_quote

2) Where is GNU ~make~ *executed*? Where is it *located* on the computer?
   #+begin_quote
   On the shell (aka commandline). Location: check ~which make~. 
   #+end_quote

   #+begin_src bash :results output
     which make
   #+end_src

   #+RESULTS:
   : /usr/bin/make

3) What is a =makefile=?
   #+begin_quote
   A configuration file for ~make~ that contains targets (to build),
   dependencies (as prerequisites to build), and rules (to act upon).
   #+end_quote

4) When is a ~make~ *target* built?
   #+begin_quote
   When the dependencies exist and are not more recent than the
   target, or when the target does not exist.
   #+end_quote

5) When do you need GNU ~make~?
   #+begin_quote
   In projects with multiple source files or steps to build the
   software. As an example, check out [[https://github.com/emacs-mirror/emacs][github.com/emacs-mirror/emacs]]
   #+end_quote
   
* DONE Week 13: Networking a web service

- [X] *Code along:* Networking a time-telling program.
- [X] *Test*: GNU Make / Byte Order / one-shot server / Web service.
- [X] *Home assignment*: Modify the networked time-telling program.
- [ ] *Bonus assignment:* Network =timer_console.c= using ~inetd~.

** Review: Time-Telling Program

Can you explain every line of this program?

#+begin_src C
  #include <stdio.h>
  #include <time.h> 

  int main()
  {
    time_t timer;

    time(&timer);

    printf("Local time is: %s", ctime(&timer));

    return 0; 
  }
#+end_src

#+RESULTS:
: Local time is: Sun Apr 13 22:16:38 2025


** Networking a Time-Telling Program to Create a Web service

To code along, open [[https://tinyurl.com/api-codealong][tinyurl.com/api-codealong]] in Emacs:

#+begin_example
  wget -O api.org tinyurl.com/api-codealong
#+end_example


* Week 14: Building a multiplex TCP client and server

- [X] Review and test: Networking a time-telling program
- [ ] Lecture/practice: Forking and multiplexing
- [ ] Lecture/codealong: Building a multiplexing TCP client

** DONE Review test
#+attr_html: :width 200px :float nil:
[[../img/test.png]]

- [X] Review as test in class: Networking the time-telling program
- [ ] Forking with ~fork~ and multiplexing with ~select~
- [ ] Building a full TCP web client
- [ ] Building a full TCP web server

** TODO Project review
#+attr_html: :width 200px :float nil:
[[../img/project_review.png]]


** Introduction to forking and multiplexing

Get the codealong file: [[https://tinyurl.com/web-codealong-1][tinyurl.com/web-codealong-1]]

* Week 15: Packet sniffing with Wireshark

* Week 16: Project presentations

* Footnotes

[fn:2]  Informally speaking what is particularly annoying is to feel as
if students are trying to get away with something - this can happen of
course if you misunderstand the assignment. The only way to deal with
that is to communicate with the client: ask if you did everything
right - of course, to do that you need to submit well in advance of
the deadline. Anyone's good opinion, once lost, is harder to regain
than it is to keep it (and my opinion of you is good to begin with but
it can get lost when I feel mistreated as a client).
