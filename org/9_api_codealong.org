#+title: Client Server Socket Example
#+author: Marcus Birkenkrahe (pledged)
#+SEQ_TODO: TODO NEXT IN_PROGRESS | DONE
#+startup: overview hideblocks indent entitiespretty:
#+property: header-args:C :main yes :includes <stdio.h> :results output :exports both:
#+property: header-args:python :session *Python* :python python3 :results output :exports both:
#+property: header-args: R :session *R* :results output :exports both:
#+property: header-args:C++ :main yes :includes <iostream> :results output :exports both:
* Objectives

The following topics are covered:

- [ ] Understanding the importance of sockets in network programming
- [ ] Understanding the client socket workflow
- [ ] Coding a TCP client socket
- [ ] Understanding the server socket workflow
- [ ] Coding a TCP server socket
- [ ] Connecting client and server over TCP
- [ ] Use of ~make~ to build applications

* Why sockets are important in network programming

- Sockets are the low level endpoint used for processing information
  across a network.

- Protocols like HTTP and FTP rely on sockets.

- Sockets are bidirectional so there isn't anything different about a
  "client" socket (on the client side) vs. a "server" socket on the
  server side.

* Client Socket Workflow

On the client side, three function calls are involved: we need to open
or create a ~socket~, ~connect~ to a remote IP address and a port, and
when the connection is accepted, we can receive data with ~recv~:

#+attr_html: :width 400px :float nil:
#+BEGIN_EXAMPLE org
+---------+
| socket()|
+---------+
     |
     v
+----------+
| connect()|
+----------+
     |
     v
+---------+
| recv()  |
+---------+
#+END_EXAMPLE

- The result of this call is stored in an integer =network_socket=, and
  this is the descriptor that we use to refer to the socket later on.
- We're going to use IP addresses (~AF_INET~) and TCP (~SOCK_STREAM~) as
  our protocol.
- Once the socket is created, we connected it to a remote address.
- If the connection is successful, we get a success signal back.
- Once we've received data, we can write it into a string and use it.

- The following function prototypes are involved:
  #+begin_src C :results none :noweb yes
    <<network header files>>

      // IPv4 or IPv6, TCP or UDP, protocol type)
    int socket(int domain, int type, int protocol);

    // descriptor, ptr to destination address, length of address
    int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

    // descriptor, ptr to buffer, max no. of bytes, msg flags)
    ssize_t recv(int sockfd, void *buf, size_t len, int flags);
  #+end_src

* Create TCP client socket

- Include standard header files:
  #+name: standard header files
  #+begin_src C :results none

  #+end_src

- Include several special header files
  #+name: network header files
  #+begin_src C :results none

  #+end_src

- Main program:
  #+begin_src C :noweb yes :tangle ./src/tcp_client.c :includes :main no
    <<standard header files>>
    <<network header files>>

  #+end_src

- To test, run this and you should get the output =Connection error.=

* Server Socket Workflow

On the server side, we also need to create a ~socket~ but then we need
to ~bind~ that socket to an IP address and port where it can ~listen~ for
connections, ~accept~ a connection, and either ~send~ or ~recv~ data to
those sockets it has connected to:

#+attr_html: :width 400px :float nil:
#+BEGIN_EXAMPLE org
+---------+
| socket()|
+---------+
     |
     v
+----------+
| bind()   |
+----------+
     |
     v
+---------+
| listen()|
+---------+
     |
     v
+---------+
| accept()|
+---------+
     |
     v
+---------+
| send()  |
+---------+
#+END_EXAMPLE

- The following additional function prototypes are involved:
  #+begin_src C :results none :noweb yesn
    <<network header files>>

    // descriptor, ptr to address, size of address
    int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);

    // descriptor, max no of pending connections that can be queried
    int listen(int sockfd, int backlog);

    // descriptor, ptr to storage for address, length of address
    int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);

    // descriptor, ptr to the data to send, no of bytes to send, msg flags
    ssize_t send(int sockfd, const void *buf, size_t len, int flags);
  #+end_src

* Create TCP server socket

- We can reuse the header files from the client side program:
  #+begin_src C :noweb yes :tangle ./src/tcp_server.c :includes :main no
    <<standard header files>>
    <<network header files>>

  #+end_src

* Connecting client and server over TCP

- *Setup:*
  1. Tangle the client source code (=tcp_client.c=)
  2. Tangle the server source code (=tcp_server.c=)
  3. Make a directory =./TCPclient= with ~mkdir -v~
  4. Make a directory =./TCPserver= with ~mkdir -v~
  5. Move client source code into =./TCPclient= with ~mv -v~
  6. Move server source code into =./TCPserver= with ~mv -v~
  7. Open *two* command-line windows and put them on top of one another

- *Demo:*
  1. In both windows, run ~ll~ to see the files.
  2. In both windows, run ~make~ to build the machine code.
  3. In both windows, run ~ll~ again to see the machine code.
  4. In =./TCPclient= run =tcp_client= to get the error message.
  5. In =./TCPserver= run =tcp_server &= to start the server.
  6. In =./TCPclient= run =tcp_client= again to get the server message.

- Why does =tcp_server= end after the client runs?
  #+begin_quote
  This TCP server is a one-shot server: after calling ~accept~ and
  sending the message, the server closes the socket and returns - the
  server process exits.
  #+end_quote

- Home assignment:
  #+begin_quote
  To keep the server open and handle multiple client requests
  (sequentially), you can wrap the ~accept~ and ~send~ part in an infinite
  loop, and add a loggint ~printf~ message to monitor activity.
  #+end_quote
  

